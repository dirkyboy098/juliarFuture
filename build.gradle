apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'antlr'

mainClassName = 'com.juliar.JuliarCompiler'

group = 'com.github.juliarLang'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dir 'jars'
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.7'
    compile fileTree(dir: 'jars', include: '*.jar')
    compile 'org.ow2.asm:asm-all:6.0_BETA'
    compile 'org.fxmisc.richtext:richtextfx:0.7-M5'
    testCompile 'junit:junit:4.11'
}


generateGrammarSource {
  arguments += ['-no-listener','-package','com.juliar.parser','-visitor']
}

jar {
    manifest {
        attributes 'Main-Class': 'com.juliar.JuliarCompiler'
    }
    from (configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'LICENSE'
        exclude 'module-info.class'
        exclude 'META-INF/**'
        exclude 'com/ibm/**'
    }
    exclude('com/juliar/JuliarAndroid.class')
}


task libJar(type: Jar, dependsOn: classes) {
    baseName 'jlib'
    //classifier = 'lib'
    manifest {
        attributes 'Main-Class': 'com.juliar.JuliarAndroid'
    }
    from(sourceSets.main.output) {
        include "**"
    }
    from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'LICENSE'
        exclude 'module-info.class'
        exclude 'META-INF/**'
        exclude 'com/ibm/**'
    }
    exclude('com/juliar/JuliarCompiler.class')
    exclude('com/juliar/gui/**')
    exclude('com/juliar/jpm/**')
    exclude('com/juliar/juliarrepl/**')
    exclude('com/nire4j/**')
    exclude('com/fastcgi/**')
    exclude('org/reactfx/**')
    exclude('org/fxmisc/**')
    exclude('org/glassfish/json/messages.properties')
    exclude('org/antlr/v4/tool/templates/**')
}

artifacts {
    archives libJar
}

test {
    include 'com/juliar/test/**'
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}

// this step is necessary when installing both jars in the local maven repository
install {
    repositories.mavenInstaller {
        addFilter('juliar') { artifact, file -> artifact.name.endsWith('b') }
        pom('juliar').whenConfigured {
            p -> p.dependencies = p.dependencies.findAll {
                dep -> dep.artifactId != "junit" && dep.artifactId != "richtextfx" && dep.artifactId != "asm-all"
            }
        }
        addFilter('juliarFuture') { artifact, file -> artifact.name.endsWith('e') }
        pom('juliar').version = '0.1'
        pom('juliarFuture').version = '0.1'
    }
}